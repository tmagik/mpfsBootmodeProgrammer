main.started=%s v%s started.
main.with_params=Selected boot mode "%s" and working in directory "%s".
main.generate_hex=Generating HEX file...
main.generate_bin=Generating BIN file...
main.generate_fake_sbic=Generating header...
main.generate_sbic=Generating SBIC (Secure Boot Image Certificate)...
main.ecdsa_generate=Generating ECDSA NIST P-384 keys...
main.ecdsa_separated=Reading ECDSA NIST P-384 keys from files...
main.cannot_fit_sbic_before_the_image=ELF file linked for address 0x20220000/eNVM page 0. Boot mode 1 and 3 programs must be linked for address 0x20220100/eNVM page 1 or higher to allow space for the SBIC/header to be stored before the program image.
main.warn_snvm_nuked=Ensure that --snvm_page, --usk and boot mode 2 program image size align correctly with the sNVM usage in the target design's Libero project.
main.prepare=Preparing for bitstream generation...
main.generate_bistream=Generating bitstream...
main.dry_run=Programming/verifying the target skipped because --dryrun was specified.
main.programming=Programming the target...
main.verify=Verifying the target...
main.complete=%s completed successfully.
main.version=%s v%s
main.help=Usage: java -jar %s.jar [--workdir directory] [--die device-die] [--package device-package] [--bootmode mode] [--snvm_page page] [--usk key] [--encrypt] [--keys] [--dryrun] [--verify] [--help] [elf-file]\r\n\
\r\n\
Note: The goal of this Java wrapper is to make fpgenprog easier to use.\r\n\
Some errors produced with fpgenprog are just passed through as they are.\r\n\
Users having issues with some of the errors need to contact Libero support\r\n\
directly. \r\n\
\r\n\
\ \ --workdir directory\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ Working directory\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ Current working directory\r\n\
\r\n\
\ \ --die device-die\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ device-die is the target device die designator\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ %s\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ %s\r\n\
\r\n\
\ \ --package device-package\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ device-package is the target device package designator\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ %s\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ %s\r\n\
\r\n\
\ \ --bootmode mode\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ mode is the boot mode to be programmed\r\n\
\ \ \ \ \ \ %s\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ 0 to 3\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ %s \r\n\
\r\n\
\ \ --snvm_page page\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ For boot mode 2 only, page is the sNVM page number starting from which the program image will be stored\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ 0 to 211\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ 0\r\n\
\r\n\
\ \ --usk key\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ For boot mode 2 only, key is the User sNVM Key specified as a 12 byte hex string; if 0 then a random USK is generated and used\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ any 12 byte hex string or 0, for example: 0x%s or %s or 0\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ 0\r\n\
\r\n\
\ \ --encrypt\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ For boot mode 2 only, use sNVM encryption to store the image as authenticated ciphertext rather than as authenticated plaintext\r\n\
\r\n\
\ \ --dryrun\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ Perform all tasks except target programming/verification\r\n\
\r\n\
\ \ --verify\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ Verify the target after programming\r\n\
\r\n\
\ \ --help\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ Print this help\r\n\
\r\n\
\ \ --keys key_mode\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ When bootmode 3 is selected, then private and public keys are required. following options are possible:\r\n\
\ \ \ \ \ \ %s\r\n\
\ \ %s\r\n\
\r\n\
\ \ elf-file\r\n\
\ \ \ \ Description:\r\n\
\ \ \ \ \ \ Boot program ELF file\r\n\
\ \ \ \ Allowed values:\r\n\
\ \ \ \ \ \ Any valid ELF filename matching the selected boot mode linkage requirements. The filename must be relative\r\n\
\ \ \ \ \ \ to the 'workdir', absolute paths are not supported.\r\n\
\ \ \ \ Default if not specified:\r\n\
\ \ \ \ \ \ If not specified then the working directory is searched for an ELF file\r\n
arg.error_boot_not_int=Invalid boot mode "%s" specified.
arg.error_boot_wrong_int=Invalid boot mode "%s" specified.
arg.error_snvm_page_wrong_int=Invalid sNVM page "%s". --snvm_page must specify a page in the range 0-%d.
arg.error_die_wrong=Invalid die "%s" specified.
arg.error_invalid_arg=Invalid option "%s" specified. See the help below for valid options.
arg.error_package_wrong=Invalid package specified.
arg.error_too_many_files=Only one ELF file can be provided to the tool.
arg.error_workdir_not_a_path="%s" is not a valid directory path.
arg.error_file_not_a_file="%s" is not a valid ELF file.
arg.error_arguments_more=The selected options require more arguments.
arg.error_key_wrong=The selected key provider "%s" is not a valid choice. Select one of the following: %s
arg.error_key_file_not_exist=Key file "%s" doesn't exist, make sure your arguments point to existing files.
validate.going_to_detect_elf=Looking for ELF file in the work directory.
validate.elf_file_found=ELF file found: "%s".
validate.error_elf_absolute=ELF file "%s" should be just filename relative to the workdir and not an absolute path.
#validate.error_couldnt_use_workdir_to_walk=The directory "%s" cannot be scanned for ELF files. Check that you have right access rights.
validate.error_workdir_walk_exception=Failed searching directory "%s" for the ELF file.
validate.error_cant_find_elf_in_workdir=Cannot find any ELF file in the directory "%s".
validate.error_elf_doesnt_exists=File "%s" does not exist.
validate.error_elf_not_elf=File "%s" must have a ".elf" extension.
validate.error_work_directory_doesnt_exists=Work directory "%s" does not exist.
validate.encrypt_in_wrong_bm=The --encrypt option is only valid for boot mode 2. 
validate.usk_not_needed=The --usk option is only valid for boot mode 2.
validate.snvp_page_not_needed=The --snvm_page option is only valid for boot mode 2.
validate.usk_not_valid=Invalid --usk key value specified "%s".
validate.usk_zero=--usk key is not specified or specifies zero so the script will use a randomly generated USK "%s" instead.
validate.only_bm3_keys=Only bootmode 3 is allowed to specify the public/private keys.  
utils.preparing_output_folder="%s" is the output folder and the previous contents of this folder will be deleted.
utils.wiping_output_folder=Programming/verifying succeeded. Wiping the content of the temporary output directory "%s".  
utils.wiping_failed=Wiping the directory "%s" failed. Make sure that it is not in use by another application (Libero SoC, Program Debug Tools, mpfsBootmodeProgrammer, fpgenprog, debugLog.txt open in an editor etc.) and that you have access rights. 
utils.cant_create_folder=Cannot create directory "%s". Make sure that it is not in use by another application (Libero SoC, Program Debug Tools, mpfsBootmodeProgrammer, fpgenprog, debugLog.txt open in an editor etc.) and that you have access rights.
invoke.exception=Exception occurred when invoking "%s" command.
invoke.finished=Finished with exit code: "%s".
invoke.verbose_invoke=Invoking command: "%s".
env.no_sc_install_dir=Failed to detect the environment variable "%s" which should point to the SoftConsole installation directory.
env.sc_ecdsa_priv_key_pass=Environment variable "%s" is not set. Empty password will be used for the encrypted key.
objcopy.sanity_check_failed=Failed to run OBJCOPY. Check if the SC_INSTALL_DIR environment variable is pointing to SoftConsole's installation directory and the SoftConsole installation is present and correct.
objcopy.elf2hex_failed=Failed to run OBJCOPY "%s" to convert ELF file "%s" to a HEX file "%s".
objcopy.elf2bin_failed=Failed to run OBJCOPY "%s" to convert ELF file "%s" to a BIN file "%s".
objcopy.bin2hex_failed=Failed to run OBJCOPY "%s" to convert BIN file "%s" to a HEX file "%s".
size.invoke_failed=Failed to run SIZE "%s" to get the Berkeley format size information from the ELF file "%s".
size.failed_parse_output=Failed to process the output from SIZE "%s". The output was: "%s".
size.detected_size=The detected size is "%s" bytes.
readelf.invoke_failed=Failed to run READELF "%s" to get the entry point from the ELF file "%s".
readelf.failed_parse_output=Failed to find the entry point from the output READELF "%s". The output was: "%s".
readelf.detected_entry=The detected entry address is "%s".
payload.dummy_failed=Failed creating a dummy HEX file "%s".
payload.sha_failed=Failed to calculate "%s" digest of the image.
payload.get_size_failed=Failed to get the size of the binary file. Was the BIN file "%s" generated correctly?
payload.envm_wrong_bootvector=ELF file linked incorrectly. The boot vector for the eNVM must be between "0x%08X" and "0x%08X" but the selected ELF file "%s" has boot vector "0x%08X". Check the linker script used to link the program.
payload.envm_imageaddr_not_aligned=ELF file linked incorrectly. The IMAGEADDR (inferred from bootvector 0x%08X) must be aligned to a 256 byte eNVM page. Check the linker script used to link the program.
payload.envm_too_big=Cannot place program in eNVM. eNVM is "0x%08X" bytes, while the selected ELF file "%s" is "0x%08X" bytes long and placed at eNVM page "%d" ("0x%08X" bytes off from the start of eNVM region) causing it to exceed the available eNVM space. Shrink your application if you can and/or change your linker script to use lower offset (if you haven't already). Read the SoftConsole release notes section on shrinking the application.
payload.boot2_ubli_failed=Failed to generate the payload image for boot mode 2.
payload.boot2_wrong_bootvector=ELF file linked incorrectly. The boot vector for boot mode 2 must be between "0x%08X" and "0x%08X" but the selected ELF file "%s" has boot vector "0x%08X". Check the linker script used to link the program.
payload.boot2_imageaddr_not_aligned=ELF file linked incorrectly. The IMAGEADDR (inferred from bootvector "0x%08X") must be 32-bit word aligned. Check the linker script used to link the program.
payload.boot2_imagelen_not_aligned=ELF file linked incorrectly. The image length "0x%08X" must be 32-bit word aligned. Check the linker script used to link the program.
payload.boot2_snvm_too_big=Cannot place program in sNVM. The application is stored in sNVM before it gets copied into LIM. The boot mode 2 sNVM size is maximum "0x%08X" bytes, however application will not fit into the sNVM with the size of the selected ELF file "%s" which is "0x%08X" bytes, together with the sNVM_page "%d" which is at "0x%08X" bytes offset within the sNVM. Consider lowering the snvm_page offset (if you have not already) and/or shrinking the application. Read the SoftConsole release notes section on shrinking the application.
payload.boot2_lim_not_fit=The application's offset "0x%08X" and size "0x%08X" combined make it too big to fit into the LIM (LIM ends at "0x%08X"). Linking at a lower LIM address, or making the application smaller could resolve this issue. See the SoftConsole release notes section on shrinking the application.
payload.usk_save_failed=Failed to save the USK key into file "%s".
payload.boot3_sbic_failed=Failed to generate the SBIC (Secure Boot Image Certificate) for boot mode 3.
payload.boot3_image_sbic_combining_failed=Failed to combine the application image together with the SBIC (Secure Boot Image Certificate).
payload.boot3_xy_save_failed=Failed to save the public key's X and Y into the "%s" file.
payload.debug_sbic_page_before_image=Getting the SBIC address page '(BootVector(0x%08X) / 256) - 1 = 0x%08X'.
payload.debug_sbic_addr_before_image=Getting the SBIC address      'SbicPage(0x%08X)    * 256      = 0x%08X'.
payload.debug_bin_size=Size of the BIN file is "%d (decimal)" or "0x%08X (hex)".
fpgenprog.not_found=Failed to detect fpgenprog%s in various locations. Please set the FPGENPROG environment variable to fully qualified fpgenprog executable path. fpgenprog%s should be located in your Program Debug Tool or Libero SoC installation.
fpgenprog.fpgenprog_wrong=The FPGENPROG environment variable needs to point to the binary directly (including the "%s" binary file).
fpgenprog.fpgenprog_path_exception=A exception happened when parsing FPGENPROG, make sure the FPGENPROG is correct and doesn't contain invalid characters such as new lines.
fpgenprog.project_creation_failed=Failed to create fpgenprog project at location "%s".
fpgenprog.bootmode_select_failed=Unable to select the boot mode "%s" for the project folder "%s".
fpgenprog.envm_client_failed=Unable to add eNVM client.
fpgenprog.snvm_client_failed=Unable to add sNVM client.
fpgenprog.generate_bitstream_failed=Generation of the bitstream file in the project folder "%s" failed.
fpgenprog.run_action_program_failed=Running the fpgenprog%s PROGRAM action failed.
fpgenprog.verify_failed=Verification of bitstream on the target failed.
log.file_write_failed=Unable to write to the log file "%s". Make sure you have write access rights to the location and it is not open in another application such as a text editor. 
log.saving_to_log=Saving extra debug information to log file "%s". 
ecdsa.key_gen_failed=Failed to generate ECC (Elliptic Curve Cryptography) keys.
ecdsa.key_read_failed=Failed to read the ECC (Elliptic Curve Cryptography) keys from the files. Make sure the files exist, the arguments provide correct path, the files have the right privileges. 
ecdsa.sign_failed=Failed to sign image with ECDSA (SHA-384).
ecdsa.parse_key_failed=Parsing of the ECC (Elliptic Curve Cryptography) key(s) failed.
ecdsa.appendable_key_explanation=\r\nKeys have to use elliptical curve NIST P-384 algorithm (secp384r1 in Java/OpenSSL).\r\n\The private key needs to be in PKCS#8 format with '-----BEGIN PRIVATE KEY-----' identifier.\r\n\
Currently, encrypted private keys with passwords are not supported.\r\n\
The public key needs to be X.509 format with '----BEGIN PUBLIC KEY-----' identifier.\r\n\
Using OpenSSL, the keys can be generated with the following commands:\r\n\
\ \ openssl ecparam -name secp384r1 -genkey -noout -out combined.ec.key\r\n\
\ \ openssl pkcs8 -topk8 -nocrypt -in combined.ec.key -out private.pem\r\n\
\ \ openssl ec -in private.pem -pubout -out public.pem\r\n\
 